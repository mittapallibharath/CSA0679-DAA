#include <stdio.h>
#define INF 99999999

int tsp(int n, int cost[n][n], int start) {
    int visited[n], dp[n][1<<n];
    for (int i=0; i<n; i++) {
        visited[i] = 0;
        for (int j=0; j<(1<<n); j++) {
            dp[i][j] = INF;
        }
    }

    visited[start] = 1;
    dp[start][1<<start] = 0;

    for (int mask=1; mask<(1<<n); mask+=2) {
        for (int i=0; i<n; i++) {
            if (mask & (1<<i)) {
                for (int j=0; j<n; j++) {
                    if (i != j && cost[i][j] != INF && (mask & (1<<j))) {
                        dp[i][mask] = dp[i][mask] < dp[j][mask^(1<<i)] + cost[j][i] ? dp[i][mask] : dp[j][mask^(1<<i)] + cost[j][i];
                    }
                }
            }
        }
    }

    int ans = INF;
    for (int i=0; i<n; i++) {
        if (i != start && cost[i][start] != INF) {
            ans = ans < dp[i][(1<<n)-1] + cost[i][start] ? ans : dp[i][(1<<n)-1] + cost[i][start];
        }
    }

    return ans;
}

int main() {
    int n, start;
    printf("Enter the number of nodes: ");
    scanf("%d", &n);
    int cost[n][n];
    printf("Enter the cost matrix:\n");
    for (int i=0; i<n; i++) {
        for (int j=0; j<n; j++) {
            scanf("%d", &cost[i][j]);
        }
    }
    printf("Enter the starting node: ");
    scanf("%d", &start);
    printf("Minimum cost: %d", tsp(n, cost, start));

    return 0;
}
