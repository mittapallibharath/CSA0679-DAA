#include <stdio.h>

#define N 8 // Change N to the desired number of queens

int board[N][N];

// Function to check if a queen can be placed at position (row, col)
int isSafe(int row, int col)
{
    int i, j;

    // Check the left side of the row
    for (i = 0; i < col; i++) {
        if (board[row][i])
            return 0;
    }

    // Check the upper diagonal on the left side
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j])
            return 0;
    }

    // Check the lower diagonal on the left side
    for (i = row, j = col; j >= 0 && i < N; i++, j--) {
        if (board[i][j])
            return 0;
    }

    return 1;
}

// Recursive function to solve the N-Queens problem
int solveNQueens(int col)
{
    // Base case: If all queens are placed, return true
    if (col == N) {
        return 1;
    }

    // Try placing the queen in each row of the current column
    for (int i = 0; i < N; i++) {
        if (isSafe(i, col)) {
            board[i][col] = 1;

            // Recur to place the rest of the queens
            if (solveNQueens(col + 1))
                return 1;

            // If placing queen at board[i][col] doesn't lead to a solution,
            // then backtrack and remove the queen from board[i][col]
            board[i][col] = 0;
        }
    }

    // If the queen cannot be placed in any row of the current column, return false
    return 0;
}

// Function to print the board
void printBoard()
{
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%d ", board[i][j]);
        }
        printf("\n");
    }
}

int main()
{
    // Initialize the board with zeros
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            board[i][j] = 0;
        }
    }

    if (solveNQueens(0)) {
        printf("Solution:\n");
        printBoard();
    } else {
        printf("No solution found.\n");
    }

    return 0;
}
