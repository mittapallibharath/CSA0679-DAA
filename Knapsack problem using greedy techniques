#include <stdio.h>

#define MAX_ITEMS 100
struct Item {
    int weight;
    int value;
};
int cmpfunc(const void* a, const void* b) {
    const struct Item* ia = (const struct Item*) a;
    const struct Item* ib = (const struct Item*) b;
    double ratio_a = (double) ia->value / ia->weight;
    double ratio_b = (double) ib->value / ib->weight;
    if (ratio_a > ratio_b) {
        return -1;
    } else if (ratio_a < ratio_b) {
        return 1;
    } else {
        return 0;
    }
}
double knapsack(int n, struct Item items[], int capacity) {
    double total_value = 0.0;
    int i;
    qsort(items, n, sizeof(struct Item), cmpfunc);
    for (i = 0; i < n && capacity > 0; i++) {
        if (items[i].weight <= capacity) {
            total_value += items[i].value;
            capacity -= items[i].weight;
        } else {
            total_value += ((double) items[i].value / items[i].weight) * capacity;
            capacity = 0;
        }
    }
    return total_value;
}

int main() {
    int n, capacity, i;
    struct Item items[MAX_ITEMS];
    printf("Enter the number of items: ");
    scanf("%d", &n);

    printf("Enter the capacity of the knapsack: ");
    scanf("%d", &capacity);
    printf("Enter the weight and value of each item:\n");
    for (i = 0; i < n; i++) {
        scanf("%d %d", &items[i].weight, &items[i].value);
    }
    double total_value = knapsack(n, items, capacity);
    printf("The maximum value of items that can be put into the knapsack is: %f\n", total_value);

    return 0;
}
